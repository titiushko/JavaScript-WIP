description = 'PlugInTapestry application'

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'tomcat'

group = 'es.com.blogspot.elblogdepicodev.plugintapestry'
version = '1.1'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:0.9.9'
    }
}

repositories {
    mavenCentral()

    // All things JBoss/Hibernate
	maven {
    	name 'JBoss'
    	url 'http://repository.jboss.org/nexus/content/groups/public/'
    }

    // For access to Apache Staging (Preview) packages
    maven {
    	name 'Apache Staging'
    	url 'https://repository.apache.org/content/groups/staging'
    }
}

// This simulates Maven's 'provided' scope, until it is officially supported by Gradle
// See http://jira.codehaus.org/browse/GRADLE-784

configurations {
    provided
    appJavadoc
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}

dependencies {
    // Tapestry
    compile 'org.apache.tapestry:tapestry-core:5.4-beta-2'
    compile 'org.apache.tapestry:tapestry-hibernate:5.4-beta-2'
    compile 'org.apache.tapestry:tapestry-beanvalidator:5.4-beta-2'

    // Compresión automática de javascript y css en el modo producción
    compile 'org.apache.tapestry:tapestry-webresources:5.4-beta-2'

    appJavadoc 'org.apache.tapestry:tapestry-javadoc:5.4-beta-2'
    
    // Spring
    compile ('org.apache.tapestry:tapestry-spring:5.4-beta-2') {
    	exclude(group: 'org.springframework')
    }
    compile 'org.springframework:spring-web:3.2.4.RELEASE'
    compile 'org.springframework:spring-orm:3.2.4.RELEASE'
    compile 'org.springframework:spring-tx:3.2.4.RELEASE'
    compile 'commons-dbcp:commons-dbcp:1.4'

    // Hibernate
    compile 'org.hibernate:hibernate-core:4.2.7.SP1'
    compile 'org.hibernate:hibernate-validator:5.0.1.Final'
    compile 'com.h2database:h2:1.3.173'
    
    // Shiro (seguridad)
    compile('org.tynamo:tapestry-security:0.5.1') {
       exclude(group: 'org.apache.shiro')
    }
    compile 'org.apache.shiro:shiro-all:1.2.2'
    
    // Pruebas unitarias
    testCompile('org.apache.tapestry:tapestry-test:5.4-beta-2') {
       exclude(group: 'org.testng')
    }
    testCompile 'net.sourceforge.tapestrytestify:tapestry-testify:1.0.4'
    testCompile 'net.sourceforge.tapestryxpath:tapestry-xpath:1.0.1'
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-all:1.9.5'
 
    // Pruebas de integración
    testCompile 'org.gebish:geb-spock:0.9.1'
    testCompile 'org.gebish:geb-junit4:0.9.1'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0' 

	// Runtime
    provided 'javax.servlet:javax.servlet-api:3.1.0'    
    runtime "org.slf4j:slf4j-log4j12:1.7.5"

	// Tomcat embebido
    tomcat 'org.apache.tomcat.embed:tomcat-embed-core:7.0.42'
    tomcat 'org.apache.tomcat.embed:tomcat-embed-logging-juli:7.0.42'
    tomcat('org.apache.tomcat.embed:tomcat-embed-jasper:7.0.42') {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.10'
}

test {
    // Excluir de los teses unitarios los teses de integración
    exclude '**/*IntegrationTest.*'
    exclude '**/*Spec.*'
}

[tomcatRun, tomcatStop]*.stopKey = 'stopKey'

task integrationTest(type: Test) {
    // Incluir los teses de integración
    include '**/*IntegrationTest.*'
    include '**/*Spec.*'

    // Antes de ejecutar las pruebas de integración iniciar el servidor de aplicaciones
    doFirst {
        tomcatRun.daemon = true
        tomcatRun.execute()
    }

    // Después de terminar las pruebas parar el servidor de aplicaciones
    doLast {
        tomcatStop.execute()
    }
}

task appJavadoc(type: Javadoc) {
    classpath = sourceSets.main.compileClasspath
    source = sourceSets.main.allJava
    destinationDir = reporting.file('appJavadoc')
    options.tagletPath = configurations.appJavadoc.files.asType(List)
    options.taglets = ['org.apache.tapestry5.javadoc.TapestryDocTaglet']
    
    doLast {
        copy {
            from sourceSets.main.java.srcDirs
            into appJavadoc.destinationDir
            exclude '**/*.java'
            exclude '**/*.xdoc'
            exclude '**/package.html'
        }

        copy {
            from file('src/javadoc/images')
            into appJavadoc.destinationDir
        }
    }
}
